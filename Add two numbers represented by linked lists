Python-->
class Solution:
    def addTwoLists(self, head1, head2):
        def reverse(head):
            prev = None
            while head:
                nxt = head.next
                head.next = prev
                prev = head
                head = nxt
            return prev
        head1 = reverse(head1)
        head2 = reverse(head2)
        carry = 0
        dummy = Node(0)
        temp = dummy
        while head1 or head2 or carry:
            sum_val = carry
            if head1:
                sum_val += head1.data
                head1 = head1.next
            if head2:
                sum_val += head2.data
                head2 = head2.next
            carry = sum_val // 10
            temp.next = Node(sum_val % 10)
            temp = temp.next
        result = reverse(dummy.next)
        while result and result.data == 0 and result.next:
            result = result.next
        return result


c-->
struct Node {
    int data;
    struct Node* next;
};
struct Node* reverse(struct Node* head) {
    struct Node *prev = NULL, *curr = head, *next = NULL;
    while (curr) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}
struct Node* addTwoLists(struct Node* head1, struct Node* head2) {
    head1 = reverse(head1);
    head2 = reverse(head2);
    int carry = 0;
    struct Node* dummy = newNode(0);
    struct Node* curr = dummy;
    while (head1 || head2 || carry) {
        int sum = (head1 ? head1->data : 0) + (head2 ? head2->data : 0) + carry;
        carry = sum / 10;
        curr->next = newNode(sum % 10);
        curr = curr->next;
        head1 = head1 ? head1->next : NULL;
        head2 = head2 ? head2->next : NULL;
    }
    return reverse(dummy->next);
}
